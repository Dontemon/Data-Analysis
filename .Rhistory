y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
replace_outliers_with_mean_exclude = function(column) {
Q1 = quantile(column, 0.25)
Q3 = quantile(column, 0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Определение выбросов
outliers = column < lower_bound | column > upper_bound
# Замена выбросов на среднее значение, исключая выбросы
column[outliers] = mean(column, na.rm = TRUE)
return(column)
}
#В данных очень много выбросов
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
diamonds$carat
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
boxplot(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
boxplot(diamonds$table)
boxplot(diamonds$table)
diamonds$table=replace_outliers_with_mean_exclude(diamonds$table)
boxplot(diamonds$table)
boxplot(diamonds$x)
boxplot(diamonds$x)
diamonds$x=replace_outliers_with_mean_exclude(diamonds$x)
boxplot(diamonds$x)
boxplot(diamonds$y)
diamonds$y=replace_outliers_with_mean_exclude(diamonds$y)
boxplot(diamonds$y)
boxplot(diamonds$z)
diamonds$z=replace_outliers_with_mean_exclude(diamonds$z)
boxplot(diamonds$z)
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
diamonds1 = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds1, "diamonds1.xlsx")
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
replace_outliers_with_mean_exclude = function(column) {
Q1 = quantile(column, 0.25)
Q3 = quantile(column, 0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Определение выбросов
outliers = column < lower_bound | column > upper_bound
# Замена выбросов на среднее значение, исключая выбросы
column[outliers] = mean(column, na.rm = TRUE)
return(column)
}
boxplot(diamonds$carat)
diamonds$carat <- replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
diamonds1 = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds1, "diamonds1.xlsx")
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
replace_outliers_with_mean_exclude = function(column) {
Q1 = quantile(column, 0.25)
Q3 = quantile(column, 0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Определение выбросов
outliers = column < lower_bound | column > upper_bound
# Замена выбросов на среднее значение, исключая выбросы
column[outliers] = mean(column, na.rm = TRUE)
return(column)
}
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
diamonds1 = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds1, "diamonds1.xlsx")
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
replace_outliers_with_mean_exclude = function(column) {
Q1 = quantile(column, 0.25)
Q3 = quantile(column, 0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Определение выбросов
outliers = column < lower_bound | column > upper_bound
# Замена выбросов на среднее значение, исключая выбросы
column[outliers] = mean(column, na.rm = TRUE)
return(column)
}
#В данных очень много выбросов
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
boxplot(diamonds$table)
diamonds$table=replace_outliers_with_mean_exclude(diamonds$table)
boxplot(diamonds$table)
boxplot(diamonds$x)
diamonds$x=replace_outliers_with_mean_exclude(diamonds$x)
boxplot(diamonds$x)
boxplot(diamonds$y)
diamonds$y=replace_outliers_with_mean_exclude(diamonds$y)
boxplot(diamonds$y)
boxplot(diamonds$z)
diamonds$z=replace_outliers_with_mean_exclude(diamonds$z)
boxplot(diamonds$z)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
#Нормализация данных
diamonds$carat = scale(diamonds$carat)
diamonds$depth = scale(diamonds$depth)
diamonds$table = scale(diamonds$table)
diamonds$x = scale(diamonds$x)
diamonds$y = scale(diamonds$y)
diamonds$z = scale(diamonds$z)
#преобразование категориальных факторов для проверки корреляции
cut_levels = c("Fair" = 1, "Good" = 2, "Very Good" = 3, "Ideal" = 4, "Premium" = 5)
diamonds$cut = cut_levels[diamonds$cut]
color_levels = c("D" = 7, "E" = 6, "F" = 5, "G" = 4, "H" = 3, "I" = 2, "J" = 1)
diamonds$color = color_levels[diamonds$color]
clarity_levels = c("I1" = 1, "SI2" = 2, "SI1" = 3, "VS2" = 4, "VS1" = 5, "VVS2" = 6, "VVS1" = 7, "IF" = 8)
diamonds$clarity = clarity_levels[diamonds$clarity]
boxplot(diamonds$cut)
boxplot(diamonds$color)
boxplot(diamonds$clarity)
#Подключение библиотек
library(shiny)
library(corrplot)
library(ggplot2)
library(randomForest)
library(xgboost)
library(readr)
library(dplyr)
library(psych)
library(writexl)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
#переделал файл в xlsx и посмотрел все столбцы на наличие пустых и отсутствующих значений
write_xlsx(diamonds, "diamonds.xlsx")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
#переделал файл в xlsx и посмотрел все столбцы на наличие пустых и отсутствующих значений
write_xlsx(diamonds, "diamonds.xlsx")
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
#Подключение библиотек
library(shiny)
library(corrplot)
library(ggplot2)
library(randomForest)
library(xgboost)
library(readr)
library(dplyr)
library(psych)
library(writexl)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds1.xlsx")
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
replace_outliers_with_mean_exclude = function(column) {
Q1 = quantile(column, 0.25)
Q3 = quantile(column, 0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Определение выбросов
outliers = column < lower_bound | column > upper_bound
# Замена выбросов на среднее значение, исключая выбросы
column[outliers] = mean(column, na.rm = TRUE)
return(column)
}
#В данных очень много выбросов
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
boxplot(diamonds$table)
diamonds$table=replace_outliers_with_mean_exclude(diamonds$table)
boxplot(diamonds$table)
boxplot(diamonds$x)
diamonds$x=replace_outliers_with_mean_exclude(diamonds$x)
boxplot(diamonds$x)
boxplot(diamonds$y)
diamonds$y=replace_outliers_with_mean_exclude(diamonds$y)
boxplot(diamonds$y)
boxplot(diamonds$z)
diamonds$z=replace_outliers_with_mean_exclude(diamonds$z)
boxplot(diamonds$z)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
#Очищенные данные
write_xlsx(diamonds, "diamonds_in_xlsx_new.xlsx")
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
#Нормализация данных
diamonds$carat = scale(diamonds$carat)
diamonds$depth = scale(diamonds$depth)
diamonds$table = scale(diamonds$table)
diamonds$x = scale(diamonds$x)
diamonds$y = scale(diamonds$y)
diamonds$z = scale(diamonds$z)
#Нормализованные данные
write_xlsx(diamonds, "diamonds_in_xlsx_new_norm.xlsx")
#Пакеты
install.packages("shiny")
install.packages("shiny")
#Подключение библиотек
library(shiny)
library(corrplot)
library(ggplot2)
library(randomForest)
library(xgboost)
library(readr)
library(dplyr)
library(psych)
library(writexl)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds_in_xlsx.xlsx")
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#удаление первого столбца (индексация)
diamonds = diamonds %>%
select(-1)
#удаление дубликатов
diamonds = diamonds %>%
filter(!duplicated(.))
replace_outliers_with_mean_exclude = function(column) {
Q1 = quantile(column, 0.25)
Q3 = quantile(column, 0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
# Определение выбросов
outliers = column < lower_bound | column > upper_bound
# Замена выбросов на среднее значение, исключая выбросы
column[outliers] = mean(column, na.rm = TRUE)
return(column)
}
#В данных очень много выбросов
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
diamonds$carat=replace_outliers_with_mean_exclude(diamonds$carat)
boxplot(diamonds$carat)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
diamonds$depth=replace_outliers_with_mean_exclude(diamonds$depth)
boxplot(diamonds$depth)
boxplot(diamonds$table)
diamonds$table=replace_outliers_with_mean_exclude(diamonds$table)
boxplot(diamonds$table)
boxplot(diamonds$x)
diamonds$x=replace_outliers_with_mean_exclude(diamonds$x)
boxplot(diamonds$x)
boxplot(diamonds$y)
diamonds$y=replace_outliers_with_mean_exclude(diamonds$y)
boxplot(diamonds$y)
boxplot(diamonds$z)
diamonds$z=replace_outliers_with_mean_exclude(diamonds$z)
boxplot(diamonds$z)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
diamonds$price=replace_outliers_with_mean_exclude(diamonds$price)
boxplot(diamonds$price)
#Очищенные данные
write_xlsx(diamonds, "diamonds_in_xlsx_new.xlsx")
#Вывод информации о типе и структуре данных
str(diamonds); summary(diamonds)
#Нормализация данных
diamonds$carat = scale(diamonds$carat)
diamonds$depth = scale(diamonds$depth)
diamonds$table = scale(diamonds$table)
diamonds$x = scale(diamonds$x)
diamonds$y = scale(diamonds$y)
diamonds$z = scale(diamonds$z)
#Нормализованные данные
write_xlsx(diamonds, "diamonds_in_xlsx_new_norm.xlsx")
data = diamonds
#преобразование категориальных факторов для проверки корреляции
cut_levels = c("Fair" = 1, "Good" = 2, "Very Good" = 3, "Ideal" = 4, "Premium" = 5)
data$cut = cut_levels[data$cut]
color_levels = c("D" = 7, "E" = 6, "F" = 5, "G" = 4, "H" = 3, "I" = 2, "J" = 1)
data$color = color_levels[data$color]
clarity_levels = c("I1" = 1, "SI2" = 2, "SI1" = 3, "VS2" = 4, "VS1" = 5, "VVS2" = 6, "VVS1" = 7, "IF" = 8)
data$clarity = clarity_levels[data$clarity]
#корреляционная матрица
data = subset(data, select = c("price", "carat", "cut", "color", "clarity", "depth", "table", "x", "y","z"))
cor(data)
#график корреляций
corrplot(cor(data), method = "color", type = "lower")
diamonds = subset(diamonds, select = c("carat", "cut", "color", "clarity", "depth", "table", "price", "x", "y","z"))
#преобразование факторов
diamonds$cut = as.factor(diamonds$cut)
diamonds$color = as.factor(diamonds$color)
diamonds$clarity = as.factor(diamonds$clarity)
set.seed(123)
# Разделение данных на обучающий и тестовый наборы в отношении 7:3
sample_size = floor(0.7 * nrow(diamonds))
train_indices = sample(seq_len(nrow(diamonds)), size = sample_size)
train = diamonds[train_indices, ]
test = diamonds[-train_indices, ]
#График, показывающий распределение цен в зависимости от качества огранки и цвета бриллиантов
ggplot(train)+
geom_boxplot(aes(y=price,x=cut,fill=cut),outlier.size=0.1,notch=T,notchwidth=0.2)+
facet_grid(~color,margins=T)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab(label='Price')+
xlab('Cut')+
ggtitle('Price distribution vs Cut for each colour')
# Определение зависимой переменной
response_variable <- "price"
# Обучение модели Random Forest
rf_model = randomForest(formula = as.formula(paste(response_variable, "~ .")),
data = train,
ntree = 100)
imp=importance(rf_model) # вычисление важности каждого признака в модели
vars=dimnames(imp)[[1]] # извлечение имени признаков
imp=data.frame(vars=vars,imp=as.numeric(imp[,1])) # создание DataFrame с именем признака и его важностью в модели
imp=imp[order(imp$imp,decreasing=T),] #сортировка по убыванию важности признаков
par(mfrow=c(1,2)) #для построения двух графиков
varImpPlot(rf_model,main='Variable Importance Plot: Base Model')
plot(rf_model,main='Error vs No. of trees plot: Base Model')
# Предсказание на тестовом наборе
predictions = predict(rf_model, newdata = test)
# Оценка качества модели (например, MSE для регрессии)
mse1 = mean((predictions - test$price)^2)
cat("Mean Squared Error on Test Data:", mse1, "\n")
set.seed(123)
selected=c(as.character(imp[1:6,1]),'price') #берём первые 6 факторов
rf_model = randomForest(formula = as.formula(paste(response_variable, "~ .")),
data = train[, selected],
ntree = 100, mtry = 3, maxdepth = 10, nodesize = 5)
par(mfrow=c(1,2)) #для построения двух графиков
varImpPlot(rf_model,main='Variable Importance Plot: Base Model')
plot(rf_model,main='Error vs No. of trees plot: Base Model')
# Предсказание на тестовом наборе
predictions = predict(rf_model, newdata = test)
# Оценка качества модели (например, MSE для регрессии)
mse2 = mean((predictions - test$price)^2)
cat("Mean Squared Error on Test Data:", mse2, "\n")
new_data = data.frame(carat = -1.33751161864015, cut = "Ideal", color = "E",	clarity = "SI2",	depth=-0.388373775647891,	table=-1.1516978657825,	x=-1.59561432525564, y=-1.58146937333704,	z=-1.60928134005861) #326
new_data$color = factor(new_data$color, levels = levels(train$color))
new_data$clarity = factor(new_data$clarity, levels = levels(train$clarity))
new_data$cut = factor(new_data$cut, levels = levels(train$cut))
prediction = predict(rf_model, newdata = new_data)
# Вывод результата
prediction #450
