theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
y = ifelse(P_x < 0.5, 0, 1)
plot(age, y)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
n = 50
a = 0
b = 80
age = sample(a:b, n,  replace = TRUE)
sigma = 5
eps = rnorm (n, 0, sigma)
theta0 = -8
theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
y = ifelse(P_x < 0.5, 0, 1)
plot(age, y)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
n = 50
a = 0
b = 80
age = sample(a:b, n,  replace = TRUE)
sigma = 5
eps = rnorm (n, 0, sigma)
theta0 = -8
theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
y = ifelse(P_x < 0.5, 0, 1)
plot(age, y)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
n = 50
a = 0
b = 80
age = sample(a:b, n,  replace = TRUE)
sigma = 5
eps = rnorm (n, 0, sigma)
theta0 = -8
theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
y = ifelse(P_x < 0.5, 0, 1)
plot(age, y)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
n = 50
a = 0
b = 80
age = sample(a:b, n,  replace = TRUE)
sigma = 5
eps = rnorm (n, 0, sigma)
theta0 = -8
theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
y = ifelse(P_x < 0.5, 0, 1)
plot(age, y)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
n = 50
a = 0
b = 80
age = sample(a:b, n,  replace = TRUE)
sigma = 5
eps = rnorm (n, 0, sigma)
theta0 = -8
theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
y = ifelse(P_x < 0.5, 0, 1)
plot(age, y)
Y = ifelse(P_x < 0.5, 0, 1)
plot(age, Y)
logreg = glm(Y~age, family = binomial(link = "logit"))
logreg
summary(logreg)
predict(logreg, new_data,  type = "response")
new_data = data.frame(age = 23)
predict(logreg, new_data,  type = "response")
new_data = data.frame(age = 80)
predict(logreg, new_data,  type = "response")
new_data = data.frame(age = 80)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 40)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
round(predict(logreg, new_data,  type = "response"), digits = 0)
round(predict(logreg, new_data,  type = "response"), digits = 0)
new_data = data.frame(age = 100)
round(predict(logreg, new_data,  type = "response"), digits = 0)
new_data = data.frame(age = 10000)
round(predict(logreg, new_data,  type = "response"), digits = 0)
new_data = data.frame(age = 40)
round(predict(logreg, new_data,  type = "response"), digits = 0)
new_data = data.frame(age = 45)
round(predict(logreg, new_data,  type = "response"), digits = 0)
new_data = data.frame(age = 43)
round(predict(logreg, new_data,  type = "response"), digits = 0)
new_data = data.frame(age = 41)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 41)
value[2] = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 41)
value[2,] = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 41)
value[] = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 42)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 43)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 44)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 45)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 44.5)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 44.4)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 44.3)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
new_data = data.frame(age = 44.2)
value = predict(logreg, new_data,  type = "response")
round(value, digits = 0)
value
new_data = data.frame(age = 44.25)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.24)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.22)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.23)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.22)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.225)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.226)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.227)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.229)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.2291)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.2292)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.2291)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.22911)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.22915)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.22918)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 44.22919)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 44)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 30)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
library(pROC)
install.packages("pROC")
library(pROC)
roc_obj = roc(y, fitted(logreg))
auc_value = auc(roc_obj)
roc_obj
print(paste("AUC:", auc_value))
plot(roc_obj, main = "ROC Curve")
# Задание 1. Формирование выборки ----
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
n = 50
a = 0
b = 80
age = sample(a:b, n,  replace = TRUE)
sigma = 5
eps = rnorm (n, 0, sigma)
theta0 = -8
theta1 = 0.2
P_x = exp(theta0 + theta1 * age + eps) / (1 + exp(theta0 + theta1 * age + eps))
Y = ifelse(P_x < 0.5, 0, 1)
plot(age, Y)
logreg = glm(Y~age, family = binomial(link = "logit"))
summary(logreg)
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 50)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 45)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 42)
value = predict(logreg, new_data,  type = "response")
value
new_data = data.frame(age = 41)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 42)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 43)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
new_data = data.frame(age = 44)
value = predict(logreg, new_data,  type = "response")
value
round(value, digits = 0)
#install.packages("pROC")
library(pROC)
roc_obj = roc(Y, fitted(logreg))
auc_value = auc(roc_obj) # Чем ближе AUC к 1, тем лучше модель.
plot(roc_obj, main = "ROC Curve")
# Библиотека ----
library(shiny)
library(shiny)
# Библиотека ----
install.packages("shiny")
library(shiny)
runExample("01_hello")
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
#Пакеты
#install.packages("shiny")
#install.packages("corrplot")
#install.packages("ggplot2")
#install.packages("randomForest")
#install.packages("xgboost")
#install.packages("readr")
#install.packages("dplyr")
#install.packages("psych")
install.packages("readr")
install.packages("writexl")
library(readr)
library(writexl)
setwd("D:/Data-Analysis/") # установка рабочей директории
diamonds = read.csv("diamonds.csv") # чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx")
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
# Заполнение нулевых значений средними значениями
data <- diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
library(dplyr)
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
# Заполнение нулевых значений средними значениями
data = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
# Заполнение нулевых значений средними значениями
data = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
#Пакеты
#install.packages("shiny")
#install.packages("corrplot")
#install.packages("ggplot2")
#install.packages("randomForest")
#install.packages("xgboost")
#install.packages("readr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пакеты
install.packages("shiny")
install.packages("corrplot")
install.packages("ggplot2")
install.packages("randomForest")
install.packages("xgboost")
install.packages("readr")
install.packages("dplyr")
install.packages("psych")
install.packages("writexl")
#Подключение библиотек
library(shiny)
library(corrplot)
library(ggplot2)
library(randomForest)
library(xgboost)
library(readr)
library(dplyr)
library(psych)
library(writexl)
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
# Заполнение нулевых значений средними значениями
data = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
write_xlsx(diamonds, "diamonds.xlsx")
write_xlsx(data, "diamonds.xlsx")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
# Заполнение нулевых значений средними значениями
data = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
# Проверка наличия нулевых значений в поле Price
has_zeros <- any(data$price == 0)
# Вывод результата
if (has_zeros) {
cat("Есть нулевые значения в поле Price.\n")
} else {
cat("Нет нулевых значений в поле Price.\n")
}
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
str(diamonds) # вывод информации о типе и структуре данных
summary(diamonds) # вывод сводки данных
data("diamonds")
data_no_duplicates = diamonds %>%
filter(!duplicated(.))
diamonds = diamonds %>%
filter(!duplicated(.))
str(diamonds) # вывод информации о типе и структуре данных
summary(diamonds) # вывод сводки данных
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
diamonds = diamonds %>%
filter(!duplicated(.))
str(diamonds) # вывод информации о типе и структуре данных
summary(diamonds) # вывод сводки данных
diamonds = diamonds %>%
filter(!duplicated(.))
str(diamonds) # вывод информации о типе и структуре данных
summary(diamonds) # вывод сводки данных
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
diamonds = diamonds %>%
select(-1)
diamonds = diamonds %>%
filter(!duplicated(.))
str(diamonds) # вывод информации о типе и структуре данных
summary(diamonds) # вывод сводки данных
diamonds = diamonds %>%
mutate(across(everything(), scale))
while (dev.cur() != 1) {
dev.off()
}
rm(list=ls())
cat("\014")
setwd("D:/Data-Analysis/") #установка рабочей директории
diamonds = read.csv("diamonds.csv") #чтение данных из файла
write_xlsx(diamonds, "diamonds.xlsx") #переделал файл в xlsx и посмотрел все столбцы, имеются ли пустые значения
#Пустых значений не обнаружено
#Установлено, что присутствуют нулевые значения в полях X, Y, Z. Это необходимо устранить.
#Заполнение нулевых значений средними значениями
diamonds = diamonds %>%
mutate(x = ifelse(x == 0, mean(x[x != 0], na.rm = TRUE), x),
y = ifelse(y == 0, mean(y[y != 0], na.rm = TRUE), y),
z = ifelse(z == 0, mean(z[z != 0], na.rm = TRUE), z))
diamonds = diamonds %>%
select(-1)
diamonds = diamonds %>%
filter(!duplicated(.))
str(diamonds) # вывод информации о типе и структуре данных
summary(diamonds) # вывод сводки данных
#Нормализация данных
diamonds$carat = scale(diamonds$carat)
diamonds$depth = scale(diamonds$depth)
diamonds$table = scale(diamonds$table)
diamonds$x = scale(diamonds$x)
diamonds$y = scale(diamonds$y)
diamonds$z = scale(diamonds$z)
diamonds
